// Automaticaly generated by rust_swig
package xyz.ecumene.jgilrs;

//Main object responsible of managing gamepads.
//
//In order to get gamepad handle, use gamepad(), or connected_gamepad(). The main difference between these two is that
//gamepad() will also return handle to gamepad that is currently disconnected. However, both functions will return None if
//gamepad with given id has never existed.
public final class Gilrs {
    //Creates new Gilrs with default settings.
    public Gilrs() throws Exception {

        mNativeObj = init();
    }
    private static native long init() throws Exception;
    //@return next pending event
    public final java.util.Optional<Event> nextEvent()  {

        return do_nextEvent(mNativeObj);
    }
    private static native java.util.Optional<Event> do_nextEvent(long me) ;
    //@return handle to gamepad with given ID. Unlike connected_gamepad(), this function will also return handle to gamepad
    //that is currently disconnected
    public final Gamepad getGamepad(GamepadId a0)  {

        long a0C0 = a0.mNativeObj;
        a0.mNativeObj = 0;

        return do_getGamepad(mNativeObj, a0C0);
    }
    private static native Gamepad do_getGamepad(long me, long a0) ;
    //@return a connected gamepad or nothing
    public final java.util.Optional<Gamepad> getConnectedGamepad(GamepadId a0)  {

        long a0C0 = a0.mNativeObj;
        a0.mNativeObj = 0;

        return do_getConnectedGamepad(mNativeObj, a0C0);
    }
    private static native java.util.Optional<Gamepad> do_getConnectedGamepad(long me, long a0) ;
    //@return all connected / disconnected gamepads
    public final Gamepad [] getGamepads()  {

        return do_getGamepads(mNativeObj);
    }
    private static native Gamepad [] do_getGamepads(long me) ;

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ long mNativeObj;
}