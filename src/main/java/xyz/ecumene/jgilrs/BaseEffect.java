// Automaticaly generated by rust_swig
package xyz.ecumene.jgilrs;

//Currently base effect support only xinput model of force feedback, which means that gamepad have weak and strong motor.
public final class BaseEffect {
    //@param kind - This is a test
    //@param magnitude
    //@param scheduling
    //@param envelope
    public BaseEffect(BaseEffectTypeWrapper a0, int a1, Replay a2, Envelope a3)  {

        int a0C0 = a0.getValue();

        long a2C0 = a2.mNativeObj;
        a2.mNativeObj = 0;

        long a3C0 = a3.mNativeObj;
        a3.mNativeObj = 0;

        mNativeObj = init(a0C0, a1, a2C0, a3C0);
    }
    private static native long init(int a0, int a1, long a2, long a3) ;

    public final BaseEffectTypeWrapper getKind()  {

        return do_getKind(mNativeObj);
    }
    private static native BaseEffectTypeWrapper do_getKind(long me) ;
    //@return when to replay the effect.
    public final Replay getScheduling()  {

        return do_getScheduling(mNativeObj);
    }
    private static native Replay do_getScheduling(long me) ;
    //@return envelope shaped attenuation(time) function.
    public final Envelope getEnvelope()  {

        return do_getEnvelope(mNativeObj);
    }
    private static native Envelope do_getEnvelope(long me) ;

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ long mNativeObj;
}